{"ast":null,"code":"var _jsxFileName = \"/home/ekeric112/code/React/monsters-rolodexFunctional/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // the arguments are the props\n  const [searchField, setSearchField] = useState(\"\"); // useState gives us 2 values: [value, setValue] [line a]\n  const [monsters, setMonsters] = useState([]);\n  const [filteredMonsters, setFilterMonsters] = useState(monsters);\n  useEffect(() => {\n    // the code only runs when the stuff in [] changes\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(users => setMonsters(users));\n  }, []); // bc its empty, it will only run once when it mounts\n\n  useEffect(() => {\n    const newFilteredMonsters = monsters.filter(monster => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    setFilterMonsters(newFilteredMonsters);\n  }, [monsters, searchField]); // only run the callback when monsters or searchField changes\n\n  const onSearchChange = event => {\n    const searchFieldString = event.target.value.toLocaleLowerCase();\n    setSearchField(searchFieldString);\n\n    // replaced by line a\n    // this.setState(() => {\n    //   // if the name is the same, it will update the key with the value: event.target.value.toLocaleLowerCase();\n    //   return { searchField };\n    // });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      className: \"monsters-search-box\",\n      onChangeHandler: onSearchChange,\n      placeholder: \"search monsters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      monsters: filteredMonsters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"MvyKw5tluND20PIci7qHSGvBw0c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","CardList","SearchBox","jsxDEV","_jsxDEV","App","_s","searchField","setSearchField","monsters","setMonsters","filteredMonsters","setFilterMonsters","fetch","then","response","json","users","newFilteredMonsters","filter","monster","name","toLocaleLowerCase","includes","onSearchChange","event","searchFieldString","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChangeHandler","placeholder","_c","$RefreshReg$"],"sources":["/home/ekeric112/code/React/monsters-rolodexFunctional/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nconst App = () => {\n  // the arguments are the props\n  const [searchField, setSearchField] = useState(\"\"); // useState gives us 2 values: [value, setValue] [line a]\n  const [monsters, setMonsters] = useState([]);\n  const [filteredMonsters, setFilterMonsters] = useState(monsters);\n\n  useEffect(() => {\n    // the code only runs when the stuff in [] changes\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => setMonsters(users));\n  }, []); // bc its empty, it will only run once when it mounts\n\n  useEffect(() => {\n    const newFilteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n\n    setFilterMonsters(newFilteredMonsters);\n  }, [monsters, searchField]); // only run the callback when monsters or searchField changes\n\n  const onSearchChange = (event) => {\n    const searchFieldString = event.target.value.toLocaleLowerCase();\n    setSearchField(searchFieldString);\n\n    // replaced by line a\n    // this.setState(() => {\n    //   // if the name is the same, it will update the key with the value: event.target.value.toLocaleLowerCase();\n    //   return { searchField };\n    // });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-title\">Monsters Rolodex</h1>\n\n      <SearchBox\n        className=\"monsters-search-box\"\n        onChangeHandler={onSearchChange}\n        placeholder=\"search monsters\"\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,QAAQ,MAAM,4CAA4C;AACjE,OAAOC,SAAS,MAAM,8CAA8C;AACpE,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,gBAAgB,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAACU,QAAQ,CAAC;EAEhET,SAAS,CAAC,MAAM;IACd;IACAa,KAAK,CAAC,4CAA4C,CAAC,CAChDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,KAAK,IAAKP,WAAW,CAACO,KAAK,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERjB,SAAS,CAAC,MAAM;IACd,MAAMkB,mBAAmB,GAAGT,QAAQ,CAACU,MAAM,CAAEC,OAAO,IAAK;MACvD,OAAOA,OAAO,CAACC,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAACC,QAAQ,CAAChB,WAAW,CAAC;IAC/D,CAAC,CAAC;IAEFK,iBAAiB,CAACM,mBAAmB,CAAC;EACxC,CAAC,EAAE,CAACT,QAAQ,EAAEF,WAAW,CAAC,CAAC,CAAC,CAAC;;EAE7B,MAAMiB,cAAc,GAAIC,KAAK,IAAK;IAChC,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACN,iBAAiB,CAAC,CAAC;IAChEd,cAAc,CAACkB,iBAAiB,CAAC;;IAEjC;IACA;IACA;IACA;IACA;EACF,CAAC;EAED,oBACEtB,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1B,OAAA;MAAIyB,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE/C9B,OAAA,CAACF,SAAS;MACR2B,SAAS,EAAC,qBAAqB;MAC/BM,eAAe,EAAEX,cAAe;MAChCY,WAAW,EAAC;IAAiB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACF9B,OAAA,CAACH,QAAQ;MAACQ,QAAQ,EAAEE;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA5CID,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AA8CT,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}